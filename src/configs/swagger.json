{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "caps_blog_app",
    "description": "Backend of the Caps Blog App",
    "termsOfService": "https://www.ibrsec.com",
    "license": {
      "name": "ISC"
    },
    "contact": {
      "name": "ibrsec",
      "email": "ibr.seckin@gmail.com"
    }
  },
  "host": "capsblog-fs-express-react.onrender.com",
  "basePath": "/",
  "schemes": [
    "https",
    "http"
  ],
  "securityDefinitions": {
    "Token": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": " Simple token authentication *  example: <b>Token ...tokenkey...</b>"
    },
    "Bearer": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "Jwt token authentication *  example : <b>Bearer ...jwt tokenkey...</b>"
    }
  },
  "consumes": [
    "application/json",
    "multipart/form-data"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List Users",
        "description": "  List all users!</br></br>  <b>Permission= Loginned user</b></br>   - Normal users can't list other users</br>  - Admin users can list everyone</br></br>  Token endpoint is hidden </br></br>  You can send query with endpoint for filter[],search[], sort[], page and limit.  <ul> Examples:   <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>   <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>   <li>URL/?<b>page=2&limit=1</b></li>  </ul>  ",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create new User",
        "description": "  create a new user!</br></br>  <b>Permission= No Permission</b></br>   - Admin or in-active users can be create.d just by admin users</br></br>  - Password type Rules- [lenght:8-16, at least: 1 upper, 1 lower, 1 number, 1 special[@$!%*?&]]</br>  - Email type Rules- --@--.--</br>  - Required fields: - username, email, password, firstName, lastName, gender</br>   - if user sends a image with file upload it returns, else a random pic returns</br>   - File uploads with multipart form data</br>   ",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "image",
            "in": "formData",
            "type": "file",
            "required": false,
            "description": "Upload profile image!"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "testuser"
                },
                "email": {
                  "type": "string",
                  "example": "testuser@email.com"
                },
                "password": {
                  "type": "string",
                  "example": "Password1*"
                },
                "firstName": {
                  "type": "string",
                  "example": "firstname"
                },
                "lastName": {
                  "type": "string",
                  "example": "lastname"
                },
                "gender": {
                  "type": "string",
                  "example": "male"
                },
                "isActive": {
                  "type": "boolean",
                  "example": true
                },
                "isAdmin": {
                  "type": "boolean",
                  "example": false
                }
              },
              "required": [
                "username",
                "email",
                "password",
                "firstName",
                "lastName",
                "gender"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully  !",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "A new user is created!!"
                },
                "token": {
                  "type": "string",
                  "example": "tokenkey"
                },
                "bearer": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "example": "accestoken key"
                    },
                    "refreshToken": {
                      "type": "string",
                      "example": "refreshtoken key"
                    }
                  }
                },
                "data": {
                  "$ref": "#/definitions/User"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request - username,email,password, firstName, gender lastName fields are required!"
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user",
        "description": "  Get a user by id!!</br></br>  <b>Permission= Loginned user</b></br>   - Admin can list all users!</br>   - Normal user can list just theirselves!</br></br>",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "image",
            "in": "formData",
            "type": "file",
            "required": false,
            "description": "Upload profile image!"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "testuser"
                },
                "email": {
                  "type": "string",
                  "example": "testuser@email.com"
                },
                "password": {
                  "type": "string",
                  "example": "Password1*"
                },
                "firstName": {
                  "type": "string",
                  "example": "firstname"
                },
                "lastName": {
                  "type": "string",
                  "example": "lastname"
                },
                "gender": {
                  "type": "string",
                  "example": "male"
                },
                "isActive": {
                  "type": "boolean",
                  "example": true
                },
                "isAdmin": {
                  "type": "boolean",
                  "example": false
                }
              }
            },
            "description": "One field is enough!"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "User is found!"
                },
                "data": {
                  "$ref": "#/definitions/User"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "202": {
            "description": "Successfully partially updated!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "User is partially updated!!"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "modifiedCount": {
                      "type": "number",
                      "example": 1
                    }
                  }
                },
                "new": {
                  "$ref": "#/definitions/User"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "204": {
            "description": "Successfully deleted!"
          },
          "400": {
            "description": "Bad request - Invalid userId(paramId) type(ObjectId)!"
          },
          "404": {
            "description": "Not found - User not found fro delete!"
          },
          "500": {
            "description": "Something went wrong! - asked record is found, but it couldn't be updated!"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a User",
        "description": "  Update a User by id!</br></br>  <b>Permission= Normal user</b></br>   - Admin users can be update.d just by admin users</br>   - Other users can update theirselves</br>  - Admin or active modifications are accessible for just the admin users!</br> </br>  - Password type Rules- [lenght:8-16, at least: 1 upper, 1 lower, 1 number, 1 special[@$!%*?&]]</br>  - Email type Rules- --@--.--</br>  - Required fields: - username, email, password, firstName, lastName, gender</br>   - if user try to update user image with file upload, it returns </br>   - if user changes the gender without uploading a file image, then avatar changes to correct gender automaticly!</br>   - File uploads with multipart form data</br>   ",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "image",
            "in": "formData",
            "type": "file",
            "required": false,
            "description": "Upload profile image!"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "testuser"
                },
                "email": {
                  "type": "string",
                  "example": "testuser@email.com"
                },
                "password": {
                  "type": "string",
                  "example": "Password1*"
                },
                "firstName": {
                  "type": "string",
                  "example": "firstname"
                },
                "lastName": {
                  "type": "string",
                  "example": "lastname"
                },
                "gender": {
                  "type": "string",
                  "example": "male"
                },
                "isActive": {
                  "type": "boolean",
                  "example": true
                },
                "isAdmin": {
                  "type": "boolean",
                  "example": false
                }
              },
              "required": [
                "username",
                "email",
                "password",
                "firstName",
                "lastName",
                "gender"
              ]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully  !",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "User is  !!"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "modifiedCount": {
                      "type": "number",
                      "example": 1
                    }
                  }
                },
                "new": {
                  "$ref": "#/definitions/User"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request    </br>- Invalid userId(paramId) type(ObjectId)!   </br>- username, email, password, firstName, lastName, gender fields are required!   </br>- Non-admin users can't modify other users!   "
          },
          "404": {
            "description": "Not found - User not found for update!"
          },
          "500": {
            "description": "Something went wrong! - asked record is found, but it couldn't be updated!"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "description": "  Delete a user by id!!</br></br>  <b>Permission= Admin user</b></br>   - Admin can delete all users!</br>  - Other users can't delete any user!</br>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully  !"
          },
          "400": {
            "description": "Bad request - Invalid userId(paramId) type(ObjectId)!"
          },
          "404": {
            "description": "Not found - User not found fro delete!"
          },
          "500": {
            "description": "Something went wrong! - asked record is found, but it couldn't be updated!"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Partial Update",
        "description": "  Partial Update a User by id!</br></br>  <b>Permission= Normal user</b></br>   - Admin users can be update.d just by admin users</br>  - Other users can update just theirselves</br>  - Admin or active modifications are accessible for just the admin users!</br> </br>  - Password type Rules- [lenght:8-16, at least: 1 upper, 1 lower, 1 number, 1 special[@$!%*?&]]</br>  - Email type Rules- --@--.--</br>  - Required fields: - At least one of the username, email, password, firstName, lastName, gender, isActive, isAdmin fields is required!</br>   - if user try to update user image with file upload, it returns </br>   - if user changes the gender without uploading a file image, then avatar changes to correct gender automaticly!</br>   - File uploads with multipart form data</br>  ",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "image",
            "in": "formData",
            "type": "file",
            "required": false,
            "description": "Upload profile image!"
          },
          {
            "name": "body",
            "in": "body",
            "description": "One field is enough!",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "testuser"
                },
                "email": {
                  "type": "string",
                  "example": "testuser@email.com"
                },
                "password": {
                  "type": "string",
                  "example": "Password1*"
                },
                "firstName": {
                  "type": "string",
                  "example": "firstname"
                },
                "lastName": {
                  "type": "string",
                  "example": "lastname"
                },
                "gender": {
                  "type": "string",
                  "example": "male"
                },
                "isActive": {
                  "type": "boolean",
                  "example": true
                },
                "isAdmin": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully partially updated!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "User is partially updated!!"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "modifiedCount": {
                      "type": "number",
                      "example": 1
                    }
                  }
                },
                "new": {
                  "$ref": "#/definitions/User"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request    </br>- Invalid userId(paramId) type(ObjectId)!   </br>- At least one field of username, email, password, firstName, lastName, gender, isActive, isAdmin fields is required!   </br>- Non-admin users can't modify other users!      "
          },
          "404": {
            "description": "Not found - User not found for partial update!"
          },
          "500": {
            "description": "Something went wrong! - asked record is found, but it couldn't be updated!"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login",
        "description": "  Login with username/email and password!</br></br>  <b>Permission= No Permission</b></br></br>  - Password type Rules- [lenght:8-16, at least: 1 upper, 1 lower, 1 number, 1 special[@$!%*?&]]</br>  - Email type Rules- --@--.--</br>  - Required fields: - username or email,password</br>  ",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "username"
                },
                "email": {
                  "type": "string",
                  "example": "email@email.com"
                },
                "password": {
                  "type": "string",
                  "example": "Password1*"
                }
              },
              "required": [
                "username",
                "email",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Logined!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Login is OK!"
                },
                "token": {
                  "type": "string",
                  "example": "tokenkey"
                },
                "bearer": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "example": "access token"
                    },
                    "refreshToken": {
                      "type": "string",
                      "example": "refresh token"
                    }
                  }
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "66362c828c9af95390f5aae5"
                    },
                    "username": {
                      "type": "string",
                      "example": "testba"
                    },
                    "password": {
                      "type": "string",
                      "example": "f1dffdee8d0642d170e697331929a7250aedca4ad508f4d1f9986dbdb888c5fc"
                    },
                    "email": {
                      "type": "string",
                      "example": "testba@test.com"
                    },
                    "firstName": {
                      "type": "string",
                      "example": "testba"
                    },
                    "lastName": {
                      "type": "string",
                      "example": "batest"
                    },
                    "isActive": {
                      "type": "boolean",
                      "example": true
                    },
                    "isStaff": {
                      "type": "boolean",
                      "example": false
                    },
                    "isAdmin": {
                      "type": "boolean",
                      "example": false
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2024-05-04T12:39:30.473Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2024-05-04T12:39:30.473Z"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request - email or username and password fields are required!"
          },
          "401": {
            "description": "Unauthorized:    </br>- User not found!   </br>- Your account is not active - please contact with support!   </br>- Invalid password!   "
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh token",
        "description": "  Refresh the access token with refresh token!</br></br>   <b>Permission= No Permission</b></br></br>  - Required fields: - bearer. refresh Token</br>  ",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "bearer": {
                  "type": "object",
                  "properties": {
                    "refresh Token": {
                      "type": "string",
                      "example": "...refresh token"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully  !",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Access token is  !!"
                },
                "result": {
                  "type": "object",
                  "properties": {
                    "bearer": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "access token"
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request - bearer.refreshToken is a required field!"
          },
          "401": {
            "description": "Unauthorized:    </br>- Unauhtorized - Invalid signature - invalid token or token is expired!!   </br>- Unauhtorized - Your account is not active - please contact with support!!!   </br>- User not found!   </br>- Invalid password!   "
          }
        }
      }
    },
    "/api/auth/logout": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout",
        "description": "  Logout with with token or with out token!</br></br>  <b>Permission= No Permission</b></br></br>  ",
        "responses": {
          "200": {
            "description": "Successfully Logged out!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Logout is OK!"
                },
                "result": {
                  "type": "object",
                  "properties": {
                    "deletedToken": {
                      "type": "number",
                      "example": 1
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/categories/": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "List Categories",
        "description": "  List all Categories!</br></br>  <b>Permission= No Permission</b></br>   You can send query with endpoint for filter[],search[], sort[], page and limit.  <ul> Examples:   <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>   <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>   <li>URL/?<b>page=2&limit=1</b></li>  </ul>  ",
        "responses": {
          "200": {
            "description": "Successfully Listed!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Categories are listed!"
                },
                "data": {
                  "$ref": "#/definitions/Category"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Create Category",
        "description": "  Create a Category!</br></br>  <b>Permission= Admin user</b></br></br>  - Category name max length: 15</br>   - Category name min length: 3</br>   - Category name must be unique</br>   ",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "test category name"
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully  !",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "A new category is created!"
                },
                "data": {
                  "$ref": "#/definitions/Category"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request - name field is required!</br>     "
          },
          "409": {
            "description": "Conflict - This category is already exist!</br>    "
          }
        }
      }
    },
    "/api/categories/{id}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get a Category",
        "description": "  Get a Category by category id(ObjectId)!</br></br>  <b>Permission= Loginned user</b></br>   ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Found!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Category is found!"
                },
                "data": {
                  "$ref": "#/definitions/Category"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid param Id type! (it Should be ObjectId)!"
          },
          "404": {
            "description": "Not found - Category not found!"
          }
        }
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "summary": "UPDATE Category",
        "description": "  Update a Category with id(ObjectId)!</br></br>  <b>Permission= Admin user</b></br></br>  - Category name max length: 15</br>   - Category name min length: 3</br>   - Category name must be unique</br>   ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "test category name"
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully  !",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Category is  !"
                },
                "data": {
                  "$ref": "#/definitions/Category"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request: </br>  - name field is required!</br>  - Invalid param Id type! (it Should be ObjectId)!</br>     "
          },
          "404": {
            "description": "Not found: </br>  - Category not found for update!</br>     "
          },
          "409": {
            "description": "Conflict: </br>  - This category is already exist!</br>     "
          },
          "500": {
            "description": "Something went wrong! - Category is found! But it couldn't be updated!"
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Delete a Category",
        "description": "  Delete a Category by category id(ObjectId)!</br></br>  <b>Permission= Admin user</b></br>   ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Deleted!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Category is  !"
                },
                "data": {
                  "$ref": "#/definitions/Category"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request - Invalid param Id type! (it Should be ObjectId)!"
          },
          "404": {
            "description": "Not found - Category not found for deletion!"
          },
          "500": {
            "description": "Something went wrong! - Category is found! But it couldn't be deleted!"
          }
        }
      }
    },
    "/api/blogs/": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "summary": "List Blogs",
        "description": "  List all Blogs!</br></br>  <b>Permission= Loginned user</b></br>   You can send query with endpoint for filter[],search[], sort[], page and limit.  <ul> Examples:   <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>   <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>   <li>URL/?<b>page=2&limit=1</b></li>  </ul>  ",
        "responses": {
          "200": {
            "description": "Successfully Listed!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Blogs are listed!"
                },
                "data": {
                  "$ref": "#/definitions/Blog"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Blogs"
        ],
        "summary": "Create Blog",
        "description": "  Create a Blog!</br></br>  <b>Permission= Loginned user</b></br></br>  - title field length between 3 to 50</br>   - content field length between 3 to 50000</br>   - image field max Length: 1000</br>   - userId and categoryId should exist at their own collections</br>   - File uploads with multipart form data</br>  - Required fields : categoryId, title, content, image(or file upload), isPublish </br>  - if image field and file upload are comes together, file upload will happen!</br>  - userId automaticly set!</br>  - likes and countOfVisitors fields are restricted to modify from here</br>  </br>   ",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "image",
            "in": "formData",
            "type": "file",
            "required": false,
            "description": "Upload blog image!"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "categoryId": {
                  "type": "string",
                  "example": "66cc45cff067d55adc479cc6"
                },
                "title": {
                  "type": "string",
                  "example": "example title"
                },
                "content": {
                  "type": "string",
                  "example": "example content"
                },
                "image": {
                  "type": "string",
                  "example": "http:// or https:// or file upload"
                },
                "isPublish": {
                  "type": "boolean",
                  "example": true
                }
              },
              "required": [
                "categoryId",
                "title",
                "content",
                "image",
                "isPublish"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully  !",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "A new blog is  !"
                },
                "data": {
                  "$ref": "#/definitions/Blog"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request: </br>  - categoryId, title, content, isPublish, image(or file upload) fields are required!</br>   - Invalid userId, categoryId type(ObjectId)!</br>   - Length errors!</br>   - image url should start with http:// or https://!</br>   - image field or a file uploading with multi-part/form-data is a requirement!</br>   </br>     "
          },
          "404": {
            "description": "Not Found: </br>  - userId not found on users!</br>   - categoryId not found on categories!</br>   </br>     "
          }
        }
      }
    },
    "/api/blogs/{id}": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "summary": "Get a Blog",
        "description": "  Get a Blog by blog id(ObjectId)!</br></br>  <b>Permission= No Permission</b></br>   ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Found!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Blog is found!"
                },
                "data": {
                  "$ref": "#/definitions/Blog"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid param Id type! (it Should be ObjectId)!"
          },
          "404": {
            "description": "Not found - Blog not found!"
          }
        }
      },
      "put": {
        "tags": [
          "Blogs"
        ],
        "summary": "Update Blog",
        "description": "  Update a Blog with id(ObjectId)!</br></br>  <b>Permission= Loginned user</b></br>  - Users can update just own blogs</br>  - Admin user can update all blogs</br>  </br>  - title field length between 3 to 50</br>   - content field length between 3 to 50000</br>   - image field max Length: 1000</br>   - userId and categoryId should exist at their own collections</br>   - File uploads with multipart form data</br>  - Required fields : categoryId, title, content, image(or file upload), isPublish </br>  - if image field and file upload are comes together, file upload will happen!</br>   - userId, likes and countOfVisitors fields are restricted to modify from here</br>  </br>   ",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "image",
            "in": "formData",
            "type": "file",
            "required": false,
            "description": "Upload blog image!"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "categoryId": {
                  "type": "string",
                  "example": "66cc45cff067d55adc479cc6"
                },
                "title": {
                  "type": "string",
                  "example": "example title"
                },
                "content": {
                  "type": "string",
                  "example": "example content"
                },
                "image": {
                  "type": "string",
                  "example": "http:// or https:// or file upload"
                },
                "isPublish": {
                  "type": "boolean",
                  "example": true
                }
              },
              "required": [
                "categoryId",
                "title",
                "content",
                "image",
                "isPublish"
              ]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully  !",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Blog is  !"
                },
                "data": {
                  "$ref": "#/definitions/Blog"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request: </br>  - categoryId, title, content, isPublish, image(or file upload) fields are required!</br>  - Invalid param Id, categoryId, userId type! (it Should be ObjectId)!</br>   - Length errors!</br>   - image url should start with http:// or https://!</br>   - image field or a file uploading with multi-part/form-data is a requirement!</br>     "
          },
          "403": {
            "description": "Forbidden: </br>  - You are not authorized to update this blog!</br>     "
          },
          "404": {
            "description": "Not found: </br>  - Blog not found for update!</br>   - Category not found on categories!</br>     "
          },
          "500": {
            "description": "Something went wrong! - Blog is found! But it couldn't be updated!"
          }
        }
      },
      "delete": {
        "tags": [
          "Blogs"
        ],
        "summary": "Delete a Blog",
        "description": "  Delete a Blog by blog id(ObjectId)!</br></br>  <b>Permission= Loginned user</b></br>  - Users can delete just own blogs</br>  - Admin user can delete all blogs</br>  </br>   ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Deleted!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Blog is  !"
                },
                "data": {
                  "$ref": "#/definitions/Blog"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request - Invalid param Id type! (it Should be ObjectId)!"
          },
          "403": {
            "description": "Forbidden: </br>  - You are not authorized to delete this blog!</br>     "
          },
          "404": {
            "description": "Not found - Blog not found for deletion!"
          },
          "500": {
            "description": "Something went wrong! - Blog is found! But it couldn't be deleted!"
          }
        }
      },
      "patch": {
        "tags": [
          "Blogs"
        ],
        "summary": "Partial Update Blog",
        "description": "  Partially Update a Blog with id(ObjectId)!</br></br>  <b>Permission= Loginned user</b></br>  - Users can update just own blogs</br>  - Admin user can update all blogs</br>  </br>  - title field length between 3 to 50</br>   - content field length between 3 to 50000</br>   - image field max Length: 1000</br>   - userId and categoryId should exist at their own collections</br>   - File uploads with multipart form data</br>  - Required fields, at least one of them : categoryId, title, content, image(or file upload), isPublish,requestFile(file uploading) </br>  - if image field and file upload are comes together, file upload will happen!</br>   - userId, likes and countOfVisitors fields are restricted to modify from here</br>  </br>   ",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "image",
            "in": "formData",
            "type": "file",
            "required": false,
            "description": "Upload blog image!"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "categoryId": {
                  "type": "string",
                  "example": "66cc45cff067d55adc479cc6"
                },
                "title": {
                  "type": "string",
                  "example": "example title"
                },
                "content": {
                  "type": "string",
                  "example": "example content"
                },
                "image": {
                  "type": "string",
                  "example": "http:// or https:// or file upload"
                },
                "isPublish": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully partiallyupdated!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Blog is partially updated!"
                },
                "data": {
                  "$ref": "#/definitions/Blog"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request: </br>  - At least one field is required: categoryId, title, content, isPublish, image(or file upload) !</br>  - Invalid param Id, categoryId, userId type! (it Should be ObjectId)!</br>   - Length errors!</br>   - image url should start with http:// or https://!</br>   - image field or a file uploading with multi-part/form-data is a requirement!</br>     "
          },
          "403": {
            "description": "Forbidden: </br>   - You are not authorized to update this blog!</br>     "
          },
          "404": {
            "description": "Not found: </br>  - Blog not found for update!</br>   - Category not found on categories!</br>     "
          },
          "500": {
            "description": "Something went wrong! - Blog is found! But it couldn't be updated!"
          }
        }
      }
    },
    "/api/blogs/{id}/postLike": {
      "post": {
        "tags": [
          "Blogs"
        ],
        "summary": "Post Like",
        "description": "  Post like for a Blog with param blogId(ObjectId)!</br></br>  <b>Permission= Loginned user</b></br></br>  - param id is BlogId </br>   - userId comes from login</br>   - if user liked it before, then that like get removed!</br>   </br>   ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully liked!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "User liked the blog!"
                },
                "countOflikes": {
                  "type": "number",
                  "example": 3
                },
                "data": {
                  "$ref": "#/definitions/Blog"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request: </br>   - Invalid param BlogId, userId type! (it Should be ObjectId)!</br>   - Length errors!</br>     "
          },
          "404": {
            "description": "Not found: </br>  - Blog not found on blogs!</br>   - User not found on users!</br>     "
          }
        }
      }
    },
    "/api/blogs/{id}/getLike": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "summary": "Post Like",
        "description": "  Post like for a Blog with param blogId(ObjectId)!</br></br>  <b>Permission= Loginned user</b></br></br>  - param id is BlogId </br>   - userId comes from login</br>   - User just gets the likes of a asked blog!</br>   </br>   ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully listed!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Blog post likes are listed!"
                },
                "likes": {
                  "type": "array",
                  "example": [
                    "66ccd20f801a1bb658076c31",
                    "66cc1c7e692492ee34cd79b6"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "countOflikes": {
                  "type": "number",
                  "example": 3
                },
                "data": {
                  "$ref": "#/definitions/Blog"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request: </br>   - Invalid param BlogId, userId type! (it Should be ObjectId)!</br>   - Length errors!</br>     "
          },
          "404": {
            "description": "Not found: </br>  - Blog not found on blogs!</br>   - User not found on users!</br>     "
          }
        }
      }
    },
    "/api/blogs/of/user": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "summary": "Get Blogs of a user",
        "description": "  Get blogs of a user with param userId(ObjectId)!</br></br>  <b>Permission= Loginned user</b></br></br>  - userId comes with login</br>   </br> </br>   You can send query with endpoint for filter[],search[], sort[], page and limit.  <ul> Examples:   <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>   <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>   <li>URL/?<b>page=2&limit=1</b></li>  </ul>  ",
        "responses": {
          "200": {
            "description": "Successfully listed blogs of the users!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Blogs of the user are listed!"
                },
                "data": {
                  "$ref": "#/definitions/Blog"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request: </br>   - Invalid userId type! (it Should be ObjectId)!</br>     "
          },
          "404": {
            "description": "Not found: </br>  - User not found on users!</br>     "
          }
        }
      }
    },
    "/api/comments/": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "List all Comments",
        "description": "  List all Comments!</br></br>  <b>Permission= No Permission</b></br>   You can send query with endpoint for filter[],search[], sort[], page and limit.  <ul> Examples:   <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>   <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>   <li>URL/?<b>page=2&limit=1</b></li>  </ul>  ",
        "responses": {
          "200": {
            "description": "Successfully Listed!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "All Comments are listed!"
                },
                "data": {
                  "$ref": "#/definitions/Comment"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Comments"
        ],
        "summary": "Create Comment",
        "description": "  Create a Comment!</br></br>  <b>Permission= Loginned user</b></br></br>  - blogId should exist on blogs</br>   - comment field max length is 800</br>   - userId comes with login</br>   - Required fields : blogId, comment </br>  </br>   ",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "blogId": {
                  "type": "string",
                  "example": "66cc45cff067d55adc479cc6"
                },
                "comment": {
                  "type": "string",
                  "example": "example comment"
                }
              },
              "required": [
                "blogId",
                "comment"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully  !",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "A new comment is created!"
                },
                "data": {
                  "$ref": "#/definitions/Comment"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request: </br>  - blogId, comment, userId(comes with login) fields are required!</br>   - Invalid userId, blogId type(ObjectId)!</br>   - Length errors!</br>   </br>     "
          },
          "404": {
            "description": "Not Found: </br>  - userId not found on users!</br>   - blogId not found on blogs!</br>   </br>     "
          }
        }
      }
    },
    "/api/comments/{id}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Get a Comment",
        "description": "  Get a Comment by comment id(ObjectId)!</br></br>  <b>Permission= Loginned user</b></br>   ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Found!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Comment is found!"
                },
                "data": {
                  "$ref": "#/definitions/Comment"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid param Id type! (it Should be ObjectId)!"
          },
          "404": {
            "description": "Not found - Comment not found!"
          }
        }
      },
      "put": {
        "tags": [
          "Comments"
        ],
        "summary": "Update Comment",
        "description": "  Update a Comment with id(ObjectId)!</br></br>  <b>Permission= Loginned user</b></br>  - Users can update just own comments</br>  - Admin user can update all comments</br>  </br>  - blogId should exist on blogs</br>   - comment field max length is 800</br>   - userId comes with login</br>   - Required fields : blogId, comment </br>  </br>   ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "blogId": {
                  "type": "string",
                  "example": "66cc45cff067d55adc479cc6"
                },
                "comment": {
                  "type": "string",
                  "example": "example comment"
                }
              },
              "required": [
                "blogId",
                "comment"
              ]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully  !",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Comment is  !"
                },
                "data": {
                  "$ref": "#/definitions/Comment"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request: </br>  - blogId, comment, userId(comes with login) fields are required!</br>   - Invalid userId, blogId type(ObjectId)!</br>   - Length errors!</br>   </br>   "
          },
          "403": {
            "description": "Forbidden: </br>   - You are not authorized to update this blog!</br>     "
          },
          "404": {
            "description": "Not found: </br>  - userId not found on users!</br>   - blogId not found on blogs!</br>   </br>   "
          },
          "500": {
            "description": "Something went wrong! - Comment is found! But it couldn't be updated!"
          }
        }
      },
      "delete": {
        "tags": [
          "Comments"
        ],
        "summary": "Delete a Comment",
        "description": "  Delete a Comment by comment id(ObjectId)!</br></br>  <b>Permission= Loginned user</b></br>   - Users can delete just own comments</br>  - Admin user can delete all comments</br>  </br>    ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Deleted!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Comment is  !"
                },
                "data": {
                  "$ref": "#/definitions/Comment"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request - Invalid param Id type! (it Should be ObjectId)!"
          },
          "403": {
            "description": "Forbidden: </br>  - You are not authorized to update this blog!</br>     "
          },
          "404": {
            "description": "Not found - Comment not found for deletion!"
          },
          "500": {
            "description": "Something went wrong! - Comment is found! But it couldn't be deleted!"
          }
        }
      },
      "patch": {
        "tags": [
          "Comments"
        ],
        "summary": "Partial Update Comment",
        "description": "  Partially Update a Comment with id(ObjectId)!</br></br>  <b>Permission= Loginned user</b></br>  - Users can update just own comments</br>  - Admin user can update all comments</br>  </br>  - blogId should exist on blogs</br>   - comment field max length is 800</br>   - userId comes with login</br>   - Required fields(at least one of them) : blogId, comment </br>  </br>   ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "blogId": {
                  "type": "string",
                  "example": "66cc45cff067d55adc479cc6"
                },
                "comment": {
                  "type": "string",
                  "example": "example comment"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully partiallyupdated!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Comment is partially updated!"
                },
                "data": {
                  "$ref": "#/definitions/Comment"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request: </br>  - One of the blogId, comment fields are required!</br>   - Invalid userId, blogId type(ObjectId)!</br>   - Length errors!</br>   </br>     "
          },
          "403": {
            "description": "Forbidden: </br>   - You are not authorized to update this blog!</br>     "
          },
          "404": {
            "description": "Not found: </br>  - userId not found on users!</br>   - blogId not found on blogs!</br>   </br>   "
          },
          "500": {
            "description": "Something went wrong! - Comment is found! But it couldn't be updated!"
          }
        }
      }
    },
    "/api/comments/ofBlog/{id}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Get comments of a blog",
        "description": "  Get comments of a blog with param blogId(ObjectId)!</br></br>  <b>Permission= Loginned user</b></br></br>  - param id is blogId </br>   </br>   ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully listed comments of the blog!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Comments of Blog are listed!"
                },
                "data": {
                  "$ref": "#/definitions/Comment"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request: </br>   - Invalid param blogId type! (it Should be ObjectId)!</br>     "
          },
          "404": {
            "description": "Not found: </br>  - Blog not found on blogs!</br>     "
          }
        }
      }
    },
    "/api/emails/": {
      "get": {
        "tags": [
          "Emails"
        ],
        "summary": "List Emails",
        "description": "  List all Emails!</br></br>  <b>Permission= No Permission</b></br>   You can send query with endpoint for filter[],search[], sort[], page and limit.  <ul> Examples:   <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>   <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>   <li>URL/?<b>page=2&limit=1</b></li>  </ul>  ",
        "responses": {
          "200": {
            "description": "Successfully Listed!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Emails are listed!"
                },
                "data": {
                  "$ref": "#/definitions/Email"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Emails"
        ],
        "summary": "Create Email",
        "description": "  Create a Email!</br></br>  <b>Permission= Admin user</b></br></br>  - Email field max length: 50</br>   - Email name must be unique</br>   ",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "test email name"
                },
                "categroyId": {
                  "type": "string",
                  "example": "66ccd20f801a1bb658076c39"
                }
              },
              "required": [
                "email",
                "categroyId"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully  !",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "A new email is created!"
                },
                "data": {
                  "$ref": "#/definitions/Email"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request - email field is required!</br>    - Invalid categoryId type(it should be a objectId)!</br>     "
          },
          "404": {
            "description": "Not found - Category not found on categories</br>     "
          },
          "409": {
            "description": "Conflict - This email is already exist!</br>    "
          }
        }
      }
    },
    "/api/emails/{id}": {
      "get": {
        "tags": [
          "Emails"
        ],
        "summary": "Get a Email",
        "description": "  Get a Email by email id(ObjectId)!</br></br>  <b>Permission= Loginned user</b></br>   ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Found!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Email is found!"
                },
                "data": {
                  "$ref": "#/definitions/Email"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid param Id type! (it Should be ObjectId)!"
          },
          "404": {
            "description": "Not found - Email not found!"
          }
        }
      },
      "delete": {
        "tags": [
          "Emails"
        ],
        "summary": "Delete a Email",
        "description": "  Delete a Email by email id(ObjectId)!</br></br>  <b>Permission= Admin user</b></br>   ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Deleted!",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Email is  !"
                },
                "data": {
                  "$ref": "#/definitions/Email"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request - Invalid param Id type! (it Should be ObjectId)!"
          },
          "404": {
            "description": "Not found - Email not found for deletion!"
          },
          "500": {
            "description": "Something went wrong! - Email is found! But it couldn't be deleted!"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "username": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "email": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            },
            "index": {
              "type": "boolean",
              "example": true
            },
            "validate": {
              "type": "array",
              "example": [
                null,
                "Invalid email type, type: __@__.__"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "password": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "set": {
              "type": "function"
            },
            "validate": {
              "type": "array",
              "example": [
                null,
                "Invalid password type Rules- [lenght:8-16, at least: 1 upper, 1 lower, 1 number, 1 special[@$!%*?&]]"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "firstName": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "lastName": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "gender": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "enum": {
              "type": "array",
              "example": [
                "male",
                "female"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "image": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "isActive": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "isAdmin": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "name": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "minlength": {
              "type": "number",
              "example": 3
            },
            "maxlength": {
              "type": "number",
              "example": 15
            }
          }
        }
      }
    },
    "Blog": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "categoryId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Category"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "title": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "minlength": {
              "type": "number",
              "example": 3
            },
            "maxlength": {
              "type": "number",
              "example": 200
            }
          }
        },
        "content": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "minlength": {
              "type": "number",
              "example": 3
            },
            "maxlength": {
              "type": "number",
              "example": 50000
            }
          }
        },
        "image": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "maxlength": {
              "type": "number",
              "example": 1000
            },
            "validation": {
              "type": "function"
            }
          }
        },
        "isPublish": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "likes": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "function"
              },
              "ref": {
                "type": "string",
                "example": "User"
              }
            }
          }
        },
        "countOfVisitors": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "number",
              "example": 0
            }
          }
        }
      }
    },
    "Comment": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "blogId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Blog"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "comment": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "maxlength": {
              "type": "number",
              "example": 800
            }
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "example": "true"
        },
        "message": {
          "type": "string",
          "example": "error message"
        },
        "body": {
          "type": "string",
          "example": "error body"
        },
        "stack": {
          "type": "string",
          "example": "errorstack info"
        }
      }
    }
  },
  "security": [
    {
      "Token": []
    },
    {
      "Bearer": []
    }
  ]
}